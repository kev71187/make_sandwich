require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe OrdersController do
  

  # This should return the minimal set of attributes required to create a valid
  # Order. As you add validations to Order, be sure to
  # update the return value of this method accordingly.

  def valid_attributes
    { "sandwich_id" => 1 }
  end
  
  def invalid_attributes
    { "sandwich_id" => '' }
  end

  def valid_session
    activate_authlogic
    @controller.stub!(:current_user).and_return(FactoryGirl.create(:user)) 
  end

  describe "POST create" do
    before(:each) { FactoryGirl.create(:sandwich) }
    describe "with valid params" do
      it "creates a new Order" do
        valid_session
        expect {
          post :create, {:order => valid_attributes}
        }.to change(Order, :count).by(1)
      end

      it "does not create a new Order" do
        valid_session
        expect {
          post :create, {:order => invalid_attributes}
        }.to_not change(Order, :count).by(1)
      end

      it "assigns a newly created order as @order" do
        post :create, {:order => valid_attributes}, valid_session
        assigns(:order).should be_a(Order)
        assigns(:order).should be_persisted
      end

      it "redirects to the created order" do
        post :create, {:order => valid_attributes}, valid_session
        response.should redirect_to(success_orders_path)
      end
    end
  end
end
